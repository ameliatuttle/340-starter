const invModel = require("../models/inventory-model")
const utilities = require("../utilities/")

const invCont = {}

/* ***************************
 *  Build inventory by classification view
 * ************************** */
invCont.buildByClassificationId = async function (req, res, next) {
  try {
    const classification_id = req.params.classificationId;
    const data = await invModel.getInventoryByClassificationId(classification_id);
    const grid = await utilities.buildClassificationGrid(data);
    let nav = await utilities.getNav();

    if (data && data.length > 0) {
      const className = data[0].classification_name;
      res.render("./inventory/classification", {
        title: className + " vehicles",
        nav,
        grid,
      });
    } else {
      // Render the page with no vehicles and display the message
      res.render("./inventory/classification", {
        title: "No vehicles found",
        nav,
        grid: [], // Empty grid since no vehicles were found
        message: 'No vehicles found for this classification.', // Message to display
      });
    }
  } catch (err) {
    next(err); // Proper error handling
  }
};

/* ***************************
 *  Build specific inventory item detail view
 * ************************** */
invCont.getVehicleDetail = async function (req, res, next) {
  const inventoryId = req.params.inventoryId;
  const vehicleData = await invModel.getVehicleById(inventoryId);
  const vehicleDetail = utilities.buildVehicleDetailHTML(vehicleData);
  let nav = await utilities.getNav();

  res.render("inventory/detail", {
    title: vehicleDetail.title, // Dynamic title from the utility function
    nav,
    content: vehicleDetail.html, // The HTML content generated by the utility
  });
};

/* ***************************
 *  Build inventory management view
 * ************************** */
invCont.buildManagementView = async function (req, res, next) {
  let nav = await utilities.getNav();
  const flashMessage = req.flash("notice")[0]; // Retrieve flash message if it exists
  res.render("inventory/management", {
    title: "Inventory Management",
    nav, // Dynamic navigation
    flashMessage, // Pass flash message to the view
  });
};

/* ***************************
 *  Show Add Classification Form
 * ************************** */
invCont.showAddClassificationForm = async function (req, res, next) {
  let nav = await utilities.getNav();  // Get the navigation bar
  const flashMessage = req.flash("notice")[0];  // Get any flash messages
  res.render("inventory/add-classification", {
    title: "Add New Classification",
    nav,
    flashMessage,
  });
};

/* ***************************
 *  Create a new Classification
 * ************************** */
invCont.createClassification = async function (req, res, next) {
  const classificationName = req.body.classification_name;
  
  // Validate input
  if (!classificationName || !/^[a-zA-Z0-9]+$/.test(classificationName)) {
    req.flash("notice", "Classification name must not contain spaces or special characters.");
    return res.redirect("/inv/add-classification");
  }

  try {
    // Insert the new classification into the database
    await invModel.createClassification(classificationName);

    // Set a success message and redirect to the management view
    req.flash("notice", "New classification added successfully.");
    res.redirect("/inv");
  } catch (error) {
    console.error(error);
    req.flash("notice", "Failed to add classification.");
    res.redirect("/inv/add-classification");
  }
};

// Render the Add Inventory Form with classification list
invCont.addInventoryForm = async function (req, res, next) {
  try {
    const classificationList = await utilities.buildClassificationList(); // Get classification list
    let nav = await utilities.getNav();  // Get the navigation bar
    console.log(classificationList); // Check what is returned from buildClassificationList
    res.render("inventory/add-inventory", {
      title: "Add Inventory",
      nav,
      classificationList,
      flashMessage: req.flash("flashMessage"),
      formData: {}, // Pass an empty object for the initial form render
    });
  } catch (err) {
    next(err);
  }
};

// Handle form submission for adding a new vehicle
invCont.addInventory = async function (req, res, next) {
  try {
    console.log("Incoming data:", req.body);

    const { inv_make, inv_model, inv_year, inv_description, inv_image, inv_thumbnail, inv_price, inv_miles, inv_color, classification_id } = req.body;

    if (!inv_make || !inv_model || !inv_year || !inv_description || !inv_price || !classification_id) {
      req.flash("notice", "All feilds should be filled in.");
      return res.redirect('/inv/add-inventory');
    }

    await invModel.addInventory(
      inv_make,
      inv_model,
      inv_year,
      inv_description,
      inv_image || '/images/no-image.png',
      inv_thumbnail || '/images/no-image-tn.png',
      inv_price,
      inv_miles,
      inv_color,
      classification_id
    );

    req.flash("notice", "New inventory added successfully.");
    res.redirect("/inv");
  } catch (err) {
    console.error("Error in addInventory:", err);
    req.flash('flashMessage', { message: 'An error occurred while adding the vehicle.', type: 'alert-danger' });
    res.redirect('/inv/add-inventory');
  }
};


module.exports = invCont